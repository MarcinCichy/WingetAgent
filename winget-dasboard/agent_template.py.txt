import os
import json
import socket
import time
import logging
import subprocess
import requests
import sys
import threading

# Importy wymagane do stworzenia usługi Windows
import win32serviceutil
import win32service
import win32event
import servicemanager

# --- Konfiguracja wstrzyknięta przez serwer ---
API_ENDPOINTS = [ep for ep in ["__API_ENDPOINT_1__", "__API_ENDPOINT_2__"] if ep.strip()]
API_KEY = "__API_KEY__"
LOOP_INTERVAL_SECONDS = __LOOP_INTERVAL__
FULL_REPORT_INTERVAL_LOOPS = __REPORT_INTERVAL__
WINGET_PATH_CONF = r"__WINGET_PATH__"
BLACKLIST_KEYWORDS = [__BLACKLIST_KEYWORDS__]


class AgentService(win32serviceutil.ServiceFramework):
    """Główna klasa usługi agenta Winget-Dashboard."""
    _svc_name_ = 'WingetAgentService'
    _svc_display_name_ = 'Winget-Dashboard Agent'
    _svc_description_ = 'Raportuje stan aplikacji i wykonuje zdalne zadania z panelu Winget-Dashboard.'

    def __init__(self, args):
        win32serviceutil.ServiceFramework.__init__(self, args)
        self.hWaitStop = win32event.CreateEvent(None, 0, 0, None)
        socket.setdefaulttimeout(60)
        self.is_running = True
        
        # Ustalenie ścieżki do logów - usługi powinny logować do ProgramData
        self.log_dir = os.path.join(os.environ.get("ProgramData", "C:/"), "WingetAgent")
        os.makedirs(self.log_dir, exist_ok=True)
        log_file = os.path.join(self.log_dir, 'agent.log')

        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    def SvcStop(self):
        """Metoda wywoływana, gdy usługa jest zatrzymywana."""
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)
        self.is_running = False
        logging.info("Otrzymano żądanie zatrzymania usługi.")

    def SvcDoRun(self):
        """Główna metoda wykonawcza usługi."""
        servicemanager.LogMsg(
            servicemanager.EVENTLOG_INFORMATION_TYPE,
            servicemanager.PYS_SERVICE_STARTED,
            (self._svc_name_, '')
        )
        logging.info("Usługa agenta została uruchomiona.")
        self.main_loop()
        logging.info("Usługa agenta została zatrzymana.")

    # --- Cała logika agenta przeniesiona jako metody klasy ---

    def find_winget_path(self):
        if WINGET_PATH_CONF and os.path.isfile(WINGET_PATH_CONF):
            return WINGET_PATH_CONF
        for path_dir in os.environ.get("PATH", "").split(os.pathsep):
            candidate = os.path.join(path_dir, "winget.exe")
            if os.path.isfile(candidate):
                return candidate
        try:
            user_root = os.path.expandvars(r"C:\\Users")
            if os.path.isdir(user_root):
                for username in os.listdir(user_root):
                    winapps = os.path.join(user_root, username, "AppData", "Local", "Microsoft", "WindowsApps", "winget.exe")
                    if os.path.isfile(winapps):
                        return winapps
        except Exception: pass
        try:
            result = subprocess.run(["where", "winget"], capture_output=True, text=True, encoding='utf-8')
            if result.returncode == 0:
                for line in result.stdout.strip().splitlines():
                    if os.path.isfile(line.strip()):
                        return line.strip()
        except Exception: pass
        return None

    def get_active_ip(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.settimeout(2)
            try:
                s.connect(("8.8.8.8", 80))
                ip = s.getsockname()[0]
            finally:
                s.close()
            return ip
        except Exception as e:
            logging.error(f"Błąd pobierania aktywnego IP: {e}")
            return "127.0.0.1"

    def run_command(self, command):
        try:
            full_command = (
                "[System.Threading.Thread]::CurrentThread.CurrentUICulture = [System.Globalization.CultureInfo]::GetCultureInfo('en-US'); "
                "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8; "
                "$OutputEncoding = [System.Text.Encoding]::UTF8; "
                + command
            )
            result = subprocess.run(
                ["powershell.exe", "-NoProfile", "-Command", full_command],
                capture_output=True, text=True, check=True, encoding='utf-8',
                creationflags=subprocess.CREATE_NO_WINDOW
            )
            return result.stdout
        except subprocess.CalledProcessError as e:
            logging.error("Błąd podczas wykonywania polecenia '%s': %s", command, e.stderr)
            return None
        except FileNotFoundError:
            logging.error("Nie znaleziono polecenia 'powershell.exe'.")
            return None

    def get_system_info(self):
        hostname = socket.gethostname()
        ip_address = self.get_active_ip()
        return {"hostname": hostname, "ip_address": ip_address}

    def get_reboot_status(self):
        logging.info("Sprawdzanie statusu wymaganego restartu...")
        command = "(New-Object -ComObject Microsoft.Update.SystemInfo).RebootRequired"
        output = self.run_command(command)
        return "true" in output.lower() if output else False

    def get_installed_apps(self, winget_path):
        if not winget_path or not os.path.exists(winget_path):
            logging.error("Ścieżka do winget.exe jest nieprawidłowa lub plik nie istnieje: %s", winget_path)
            return []
        logging.info(f"Pobieranie i filtrowanie listy zainstalowanych aplikacji z: {winget_path}")
        command_to_run = f'& "{winget_path}" list --accept-source-agreements'
        output = self.run_command(command_to_run)
        if not output: return []
        apps, lines = [], output.strip().splitlines()
        header_line = ""
        for line in lines:
            if "Name" in line and "Id" in line and "Version" in line:
                header_line = line; break
        if not header_line: return []
        pos_id, pos_version, pos_available = header_line.find("Id"), header_line.find("Version"), header_line.find("Available")
        pos_source = header_line.find("Source")
        if pos_available == -1: pos_available = pos_source if pos_source != -1 else len(header_line) + 20
        for line in lines:
            if line.strip().startswith("---") or not line.strip() or line == header_line or len(line) < pos_version: continue
            try:
                name, id_ = line[:pos_id].strip(), line[pos_id:pos_version].strip()
                version, source = line[pos_version:pos_available].strip(), line[pos_available:].strip() if pos_source != -1 else ""
                if not name or name.lower() == 'name': continue
                if any(k in name.lower() for k in BLACKLIST_KEYWORDS): continue
                apps.append({"name": name, "id": id_, "version": version})
            except Exception as e:
                logging.warning("Nie udało się sparsować linii aplikacji: %s | Błąd: %s", line, e)
        logging.info("Znaleziono %d przefiltrowanych aplikacji.", len(apps))
        return apps

    def get_available_updates(self, winget_path):
        if not winget_path or not os.path.exists(winget_path): return []
        logging.info("Sprawdzanie dostępnych aktualizacji aplikacji...")
        command_to_run = f'& "{winget_path}" upgrade --accept-source-agreements'
        output = self.run_command(command_to_run)
        if not output: return []
        updates, lines = [], output.strip().splitlines()
        header_line = ""
        for line in lines:
            if "Name" in line and "Id" in line and "Version" in line:
                header_line = line; break
        if not header_line: return []
        pos_id, pos_version, pos_available, pos_source = header_line.find("Id"), header_line.find("Version"), header_line.find("Available"), header_line.find("Source")
        for line in lines:
            if line.strip().startswith("---") or "upgrades available" in line.lower() or line == header_line or len(line) < pos_available: continue
            try:
                name, id_ = line[:pos_id].strip(), line[pos_id:pos_version].strip()
                current_version, available_version = line[pos_version:pos_available].strip(), line[pos_available:pos_source].strip()
                if name and name.lower() != 'name':
                    updates.append({"name": name, "id": id_, "current_version": current_version, "available_version": available_version})
            except Exception as e:
                logging.warning("Nie udało się inteligentnie sparsować linii aktualizacji: %s | Błąd: %s", line, e)
        return updates

    def get_windows_updates(self):
        logging.info("Sprawdzanie aktualizacji systemu Windows...")
        command = '''try { (New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher().Search("IsInstalled=0 and Type='Software' and IsHidden=0 and RebootRequired=0").Updates | ForEach-Object { [PSCustomObject]@{ Title = $_.Title; KB = $_.KBArticleIDs } } | ConvertTo-Json -Depth 3 } catch { return '[]' }'''
        output = self.run_command(command)
        if output:
            try: return json.loads(output)
            except json.JSONDecodeError: logging.error("Błąd dekodowania JSON z Windows Updates."); return []
        return []

    def collect_and_report(self, winget_path):
        logging.info("Rozpoczynanie cyklu pełnego raportowania.")
        system_info = self.get_system_info()
        payload = {
            "hostname": system_info["hostname"], "ip_address": system_info["ip_address"],
            "reboot_required": self.get_reboot_status(), "installed_apps": self.get_installed_apps(winget_path),
            "available_app_updates": self.get_available_updates(winget_path), "pending_os_updates": self.get_windows_updates()
        }
        headers = {"Content-Type": "application/json", "X-API-Key": API_KEY}
        threads = []
        for endpoint in API_ENDPOINTS:
            if endpoint.strip():
                t = threading.Thread(target=self.send_to_endpoint, args=(endpoint.strip(), payload, headers, system_info['hostname']))
                t.start()
                threads.append(t)
        for t in threads:
            t.join()

    def send_to_endpoint(self, endpoint, payload, headers, hostname):
        try:
            logging.info("Wysyłanie pełnego raportu do %s dla %s", endpoint, hostname)
            r = requests.post(endpoint, data=json.dumps(payload), headers=headers, timeout=60)
            r.raise_for_status()
            logging.info("Pełny raport wysłany pomyślnie do %s.", endpoint)
        except Exception as e:
            logging.error("Nie udało się wysłać pełnego raportu do %s. Błąd: %s", endpoint, e)

    def process_tasks(self, hostname, winget_path):
        if not winget_path or not os.path.exists(winget_path): return
        logging.info("Sprawdzanie dostępnych zadań...")
        headers = {"Content-Type": "application/json", "X-API-Key": API_KEY}
        tasks_list = []
        for endpoint in API_ENDPOINTS:
            base_url = endpoint.strip().replace('/report', '')
            try:
                response = requests.get(f"{base_url}/tasks/{hostname}", headers=headers, timeout=15)
                response.raise_for_status()
                tasks = response.json()
                if tasks:
                    tasks_list.extend([(base_url, t) for t in tasks])
            except Exception as e:
                logging.error("Nie udało się pobrać zadań z %s: %s", base_url, e)

        for base_url, task in tasks_list:
            logging.info("Odebrano zadanie ID %s: %s", task['id'], task['command'])
            status_final = 'błąd'
            if task['command'] == 'update_package':
                cmd = f'& "{winget_path}" upgrade --id "{task["payload"]}" --accept-package-agreements --accept-source-agreements --disable-interactivity'
                if self.run_command(cmd) is not None: status_final = 'zakończone'
            elif task['command'] == 'uninstall_package':
                cmd = f'& "{winget_path}" uninstall --id "{task["payload"]}" --accept-source-agreements --disable-interactivity --silent'
                if self.run_command(cmd) is not None: status_final = 'zakończone'
            elif task['command'] == 'force_report':
                self.collect_and_report(winget_path)
                status_final = 'zakończone'
            
            task_result_payload = {"task_id": task['id'], "status": status_final}
            try:
                requests.post(f"{base_url}/tasks/result", headers=headers, data=json.dumps(task_result_payload))
                logging.info("Zakończono przetwarzanie zadania %s ze statusem: %s", task['id'], status_final)
            except Exception as e:
                logging.error("Nie udało się wysłać wyniku zadania do %s: %s", base_url, e)

    def main_loop(self):
        """Pętla główna agenta."""
        logging.info("Uruchamianie pętli głównej agenta.")
        
        WINGET_PATH = self.find_winget_path()
        if not WINGET_PATH:
            logging.critical("Nie znaleziono winget.exe. Agent nie będzie mógł zarządzać aplikacjami.")

        current_hostname = self.get_system_info()["hostname"]
        
        # Pierwsze uruchomienie - zawsze wysyłaj pełny raport
        self.collect_and_report(WINGET_PATH)
        report_counter = 0

        while self.is_running:
            self.process_tasks(current_hostname, WINGET_PATH)
            report_counter += 1
            
            if report_counter >= FULL_REPORT_INTERVAL_LOOPS:
                self.collect_and_report(WINGET_PATH)
                current_hostname = self.get_system_info()["hostname"] # Odśwież na wypadek zmiany
                report_counter = 0

            logging.info("Cykl zakończony. Następne sprawdzenie za %ds.", LOOP_INTERVAL_SECONDS)
            
            # Czekaj na sygnał zatrzymania lub upłynięcie czasu
            rc = win32event.WaitForSingleObject(self.hWaitStop, LOOP_INTERVAL_SECONDS * 1000)
            if rc == win32event.WAIT_OBJECT_0:
                # Otrzymano sygnał zatrzymania
                break

if __name__ == '__main__':
    # Ten blok kodu jest kluczowy do zarządzania usługą
    if len(sys.argv) == 1:
        servicemanager.Initialize()
        servicemanager.PrepareToHostSingle(AgentService)
        servicemanager.StartServiceCtrlDispatcher()
    else:
        win32serviceutil.HandleCommandLine(AgentService)